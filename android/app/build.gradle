def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.xxnetwork.asia.wallet"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'x86', 'x86_64', 'mips', 'mips64', 'arm64-v8a', 'armeabi-v7a'
        }

        // 打开后出错 Could not determine the dependencies of task ':app:processDebugManifest'.
        // manifestPlaceholders = [
        //     JPUSH_PKGNAME : applicationId,
        //     JPUSH_APPKEY : System.getenv("JPUSH_APPKEY"),
        //     JPUSH_CHANNEL : "developer-default"
        // ]
    }

    signingConfigs {
        release {
            storeFile rootProject.file("app/key/sign.kjs")
            storePassword 'infodog10'
            keyAlias 'sign'
            keyPassword 'infodog10'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.2.0"

//    implementation 'cn.jiguang.sdk:jcore:2.8.2'
//    implementation 'cn.jiguang.sdk:jpush:4.0.8'
//    implementation 'cn.jiguang.sdk.plugin:fcm:4.0.8'
//    implementation 'cn.jiguang.sdk.plugin:xiaomi:4.0.8'
//    implementation 'com.huawei.hms:push:4.0.2.300'
//    implementation 'cn.jiguang.sdk.plugin:huawei:4.0.8'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
